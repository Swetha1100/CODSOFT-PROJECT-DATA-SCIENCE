# -*- coding: utf-8 -*-
"""titanic dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tY_2Lc9yoCD5graAEGOqcEgJKTIoooYE

**IMPORTING** **LIBRARIES**
"""

import pandas as pd

import numpy as np

import seaborn as sns

import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression

from sklearn.preprocessing import LabelEncoder

from sklearn.preprocessing import StandardScaler

from sklearn.metrics import accuracy_score

from sklearn.metrics import confusion_matrix

"""**LOADING** **DATASET**"""

data= pd.read_csv(r"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv")

train_data = pd.read_csv("https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv")

test_data = pd.read_csv("https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv")

"""**EXPLORATORY** **DATA** **ANALYSIS**"""

data.head()

data.info()

data.describe()

data.columns

data.shape

data['Age'].fillna(data['Age'].median(), inplace=True)

data.fillna(method='ffill', inplace=True)

le = LabelEncoder()

data['Sex'] = le.fit_transform(data['Sex'])

data['Embarked'] = le.fit_transform(data['Embarked'])

data = pd.get_dummies(data, columns=['Pclass'])

"""**SPLITTING** **DATA** **INTO** **FEATURES** **AND** **TARGET** **VARIABLES**"""

X = data.drop(['Survived'], axis=1)

y = data['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

"""**MODEL** **TRAINING** **AND** **EVALUATION**"""

model = LogisticRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

survived_predictions = np.where(y_pred == 1, 1, 0)

total_survived = np.sum(survived_predictions)

print("Total number of predicted survivors:", total_survived)

total_survived = pd.Series(y_pred).value_counts()[1]